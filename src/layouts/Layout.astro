---
import "@styles/app.css";
import "@fontsource/prompt/100.css";
import "@fontsource/prompt/400.css";
import "@fontsource/prompt/500.css";
import "@fontsource/prompt/700.css";
import "@fontsource/prompt/400-italic.css";
import { SEO } from "astro-seo";
import Nav from "@components/Nav/Nav.astro";
import Header from "@components/Header.astro";
import BackgroundPattern from "@components/BackgroundPattern.svelte";
import Footer from "@components/Footer.astro";
import Logo from "@components/ui/Logo.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  subtitle?: string;
  headerClass?: string;
  navClass?: string;
  footerClass?: string;
  forceBurger?: boolean;
}

const description =
  "Frontend web developer with over 2 years of professional experience and extensive work on personal and university projects.";

const { subtitle, headerClass, navClass, footerClass, forceBurger } =
  Astro.props;
const title =
  subtitle && subtitle.trim() !== "Adam Steciuk"
    ? `${subtitle} | Adam Steciuk`
    : "Adam Steciuk";
---

<!doctype html>
<html lang="en">
  <head>
    <SEO
      title={title}
      description={description}
      charset="UTF-8"
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: "// TODO: Add an image",
        },
        optional: {
          description: description,
          siteName: "Adam Steciuk",
        },
      }}
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content="Adam Steciuk" />
    <ViewTransitions />
  </head>
  <body class="grid min-h-svh grid-rows-[auto_1fr]">
    <div transition:persist>
      <BackgroundPattern client:visible>
        <Logo class="h-full w-full opacity-15 dark:opacity-20" />
      </BackgroundPattern>
    </div>
    <Header class={headerClass} {forceBurger} />
    <div class="flex">
      <Nav class={navClass} {forceBurger} />
      <div class="relative flex-grow">
        <slot />
        <Footer class={footerClass} />
      </div>
    </div>
    <script is:inline>
      const isBrowser = typeof localStorage !== "undefined";
      const getThemePreference = () => {
        const persistedPreference = isBrowser && localStorage.getItem("theme");
        if (persistedPreference) {
          return persistedPreference;
        }
        return window.matchMedia("(prefers-color-scheme: light)").matches
          ? "light"
          : "dark";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    </script>
    <script>
      document.addEventListener("astro:before-swap", (event) => {
        if (document.documentElement.classList.contains("dark")) {
          event.newDocument.documentElement.classList.add("dark");
        }
      });
    </script>
  </body>
</html>
