---
import { getCollection } from "astro:content";
import type { EntryMeasurements } from "@components/Timeline/types";
import TimelineEntry from "@components/Timeline/TimelineEntry.svelte";
import { sortByDate } from "@content/utils";
import EntryDetails from "@components/Timeline/EntryDetails/EntryDetails.astro";
import EntryDeselector from "@components/Timeline/EntryDeselector.svelte";
import Marker from "@components/Timeline/Marker.svelte";

const educationEntries = await getCollection("education");
const jobsEntries = await getCollection("jobs");
const projectsEntries = await getCollection("projects");

const allEntries = [...educationEntries, ...jobsEntries, ...projectsEntries];

allEntries.sort((a, b) => {
  return sortByDate(a.data.start, b.data.start);
});

const earliestStart = allEntries[0].data.start;
const latestStart = allEntries[allEntries.length - 1].data.start;

const latestEnd = allEntries.reduce((latest, entry) => {
  const end = entry.data.end;

  if (!end) {
    return latest;
  }

  if (end.year > latest.year) {
    return end;
  } else if (end.year === latest.year && end.month > latest.month) {
    return end;
  } else {
    return latest;
  }
}, latestStart);

const totalYears = latestEnd.year - earliestStart.year;
const totalMonths = totalYears * 12 + latestEnd.month - earliestStart.month + 1;

const monthHeight = 40; // in pixels
const lines: Array<
  [number, number, (typeof allEntries)[number] & EntryMeasurements][]
> = [];

allEntries.forEach((entry) => {
  const start = entry.data.start;
  const end = entry.data.end ?? latestEnd;
  const startMonths =
    (start.year - earliestStart.year) * 12 + start.month - earliestStart.month;
  const endMonths =
    (end.year - earliestStart.year) * 12 + end.month - earliestStart.month;
  let durationMonths = endMonths - startMonths;
  if (!entry.data.end) {
    // Lasts until now, so add 2 'months' for '...' and 'Now' markers
    durationMonths += 2;
  }

  const heightPx = durationMonths * monthHeight;
  const startHeightPx = startMonths * monthHeight + monthHeight / 2;

  let line = lines.findIndex((line) => {
    return line.every(([start, end]) => {
      return start >= endMonths || end <= startMonths;
    });
  });

  const entryWithMeasurements = {
    ...entry,
    startHeightPx,
    heightPx,
  };

  if (line === -1) {
    line = lines.length;
    lines.push([[startMonths, endMonths, entryWithMeasurements]]);
  } else {
    lines[line].push([startMonths, endMonths, entryWithMeasurements]);
  }
});
---

<EntryDeselector client:load />
<section>
  <div class="container">
    <div class="flex w-full justify-center gap-2">
      <div class="flex flex-col items-end">
        <Marker monthDate="now" heightPx={monthHeight} client:visible />
        <div
          class="flex items-center"
          style={{
            height: `${monthHeight}px`,
          }}
        >
          ...
        </div>
        {
          Array.from({ length: totalMonths }).map((_, i) => {
            const month =
              (totalMonths - i - 1 + earliestStart.month) % 12 || 12;

            const year =
              latestEnd.year - Math.floor((i + 12 - latestEnd.month) / 12);
            const monthDispaly = new Date(year, month - 1).toLocaleString(
              "en-us",
              {
                month: "long",
              }
            );
            if (month === 1) {
              return (
                <div class="relative">
                  <Marker
                    monthDate={{ month, year }}
                    heightPx={monthHeight}
                    client:visible
                  />
                  <div
                    class="pointer-events-none absolute bottom-0 right-2 flex min-h-max origin-center translate-y-1/2 rotate-180 select-none gap-2 text-7xl font-bold text-foreground/10"
                    style={{
                      writingMode: "vertical-lr",
                      textOrientation: "sideways",
                    }}
                  >
                    <span>{year - 1}</span>
                    <span class="font-thin">|</span>
                    <span>{year}</span>
                  </div>
                </div>
              );
            }
            return (
              <Marker
                monthDate={{ month, year }}
                heightPx={monthHeight}
                client:visible
              />
            );
          })
        }
      </div>
      <div
        class="grid gap-2"
        style={{
          gridTemplateColumns: `repeat(${lines.length}, minmax(0, 1fr))`,
        }}
      >
        {
          lines.map((line) => (
            <div class="relative w-8">
              {line.map(([_, __, entry]) => {
                return (
                  <TimelineEntry entry={entry} client:visible>
                    <EntryDetails entry={entry} />
                  </TimelineEntry>
                );
              })}
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
